[1mdiff --git a/app/html/js/settings.js b/app/html/js/settings.js[m
[1mindex 713ff87..722bf9a 100644[m
[1m--- a/app/html/js/settings.js[m
[1m+++ b/app/html/js/settings.js[m
[36m@@ -408,21 +408,42 @@[m [mmooltipass.ui.settings.getUserRequestCancel = function() {[m
         'callbackFunction': function(_response) {[m
             if(_response.success) {[m
                 $('#settings-userRequestCancel').prop('checked', Boolean(Number(_response.value)));[m
[31m-[m
[31m-                // Start quickfix: Set it to 0 if enabled[m
[31m-                if (Boolean(Number(_response.value))) {[m
[31m-                    mooltipass.device.interface.send({[m
[31m-                        'command': 'setMooltipassParameter',[m
[31m-                        'parameter': 'userRequestCancel',[m
[31m-                        'value': 0,[m
[31m-                        'callbackFunction': function(_response) {[m
[31m-                            if(!_response.success) {[m
[31m-                                mooltipass.ui.status.error($('#settings-userRequestCancel'), _response.msg);[m
[32m+[m[41m                [m
[32m+[m[32m                // Firmware v1.0 suffers a bug which prevents us from using the request cancel functionality[m
[32m+[m[32m                if (mooltipass.ui._.getDeviceVersion() == "v1.0")[m
[32m+[m[32m                {[m
[32m+[m[32m                    // Start quickfix: Set it to 0 if enabled[m
[32m+[m[32m                    if (Boolean(Number(_response.value))) {[m
[32m+[m[32m                        mooltipass.device.interface.send({[m
[32m+[m[32m                            'command': 'setMooltipassParameter',[m
[32m+[m[32m                            'parameter': 'userRequestCancel',[m
[32m+[m[32m                            'value': 0,[m
[32m+[m[32m                            'callbackFunction': function(_response) {[m
[32m+[m[32m                                if(!_response.success) {[m
[32m+[m[32m                                    mooltipass.ui.status.error($('#settings-userRequestCancel'), _response.msg);[m
[32m+[m[32m                                }[m
                             }[m
[31m-                        }[m
[31m-                    });                [m
[32m+[m[32m                        });[m[41m                [m
[32m+[m[32m                    }[m
[32m+[m[32m                    // End quickfix[m
[32m+[m[32m                }[m
[32m+[m[32m                else if (mooltipass.ui._.getDeviceVersion() == "v1.1")[m
[32m+[m[32m                {[m
[32m+[m[32m                    // Might put a dedicated checkbox for that in the future... but enable it if disabled[m
[32m+[m[32m                    if (!Boolean(Number(_response.value))) {[m
[32m+[m[32m                        console.log("V1.1 FW, enabling cancelling feature");[m
[32m+[m[32m                        mooltipass.device.interface.send({[m
[32m+[m[32m                            'command': 'setMooltipassParameter',[m
[32m+[m[32m                            'parameter': 'userRequestCancel',[m
[32m+[m[32m                            'value': 1,[m
[32m+[m[32m                            'callbackFunction': function(_response) {[m
[32m+[m[32m                                if(!_response.success) {[m
[32m+[m[32m                                    mooltipass.ui.status.error($('#settings-userRequestCancel'), _response.msg);[m
[32m+[m[32m                                }[m
[32m+[m[32m                            }[m
[32m+[m[32m                        });[m[41m                [m
[32m+[m[32m                    }[m
                 }[m
[31m-                // End quickfix[m
             }[m
             else {[m
                 mooltipass.ui.status.error($('#settings-userRequestCancel'), _response.msg);[m
[1mdiff --git a/app/manifest.json b/app/manifest.json[m
[1mindex 0ab2e77..c9df3c6 100644[m
[1m--- a/app/manifest.json[m
[1m+++ b/app/manifest.json[m
[36m@@ -1,7 +1,7 @@[m
 {[m
   "name": "Mooltipass App",[m
   "description": "Mooltipass password manager client",[m
[31m-  "version": "2.0.28",[m
[32m+[m[32m  "version": "2.0.29",[m
   "app": {[m
     "background": {[m
       "scripts": [[m
[1mdiff --git a/app/vendor/mooltipass/app.js b/app/vendor/mooltipass/app.js[m
[1mindex c1265a1..f4b1e7f 100644[m
[1m--- a/app/vendor/mooltipass/app.js[m
[1m+++ b/app/vendor/mooltipass/app.js[m
[36m@@ -50,24 +50,30 @@[m [mmooltipass.app.onMessage = function(senderId, data, callbackFunction) {[m
     }[m
 [m
     if(inputObject.command == 'getMooltipassStatus') {[m
[31m-        var responseObject = {[m
[31m-            'command': inputObject.command,[m
[31m-            'success': true,[m
[31m-            'value': status,[m
[31m-            'connected': mooltipass.device.isConnected,[m
[31m-            'unlocked': mooltipass.device.isUnlocked,[m
[31m-            'locked': !mooltipass.device.isUnlocked,[m
[31m-            'noCard': mooltipass.device.hasNoCard,[m
[31m-            'version': mooltipass.device.version,[m
[31m-        };[m
[31m-[m
[31m-        // Add backwards-compatible data information[m
[31m-        var backwards = mooltipass.app.translateResponseForBackwardsCompatibility(responseObject);[m
[31m-        // Merge backwards-compatible information into data object[m
[31m-        mergeObjects(backwards, responseObject);[m
[31m-[m
[31m-        //console.log('Response Status:', responseObject);[m
[32m+[m[32m        var responseObject = {};[m
[32m+[m[32m        responseObject.deviceStatus = {};[m
[32m+[m[32m        responseObject.deviceStatus.version = mooltipass.device.version;[m
[32m+[m[32m        responseObject.deviceStatus.connected = mooltipass.device.isConnected;[m
[32m+[m[32m        if(mooltipass.device.status == 'no-card') {[m
[32m+[m[32m            responseObject.deviceStatus.state = 'NoCard';[m
[32m+[m[32m        }[m
[32m+[m[32m        else if(mooltipass.device.status == 'locked') {[m
[32m+[m[32m            responseObject.deviceStatus.state = 'Locked';[m
[32m+[m[32m        }[m
[32m+[m[32m        else if(mooltipass.device.status == 'unlocked') {[m
[32m+[m[32m            responseObject.deviceStatus.state = 'Unlocked';[m
[32m+[m[32m        }[m
[32m+[m[32m        else if(mooltipass.device.singleCommunicationMode) {[m
[32m+[m[32m            responseObject.deviceStatus.state = 'ManageMode';[m
[32m+[m[32m        }[m
[32m+[m[32m        else if(!mooltipass.device.isConnected) {[m
[32m+[m[32m            responseObject.deviceStatus.state = 'NotConnected';[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            responseObject.deviceStatus.state = 'Error';[m
[32m+[m[32m        }[m
 [m
[32m+[m[32m        console.log('Response Status:', responseObject);[m
         chrome.runtime.sendMessage(senderId, responseObject, function() {[m
             if(chrome.runtime.lastError) {[m
                 // TODO: Chrome 49 returns this error which does not affect the functionality. No real solution found yet (2016-03-18)[m
[36m@@ -175,29 +181,6 @@[m [mmooltipass.app.translateResponseForBackwardsCompatibility = function(_response)[m
     if(_response.success && command == 'getRandomNumber') {[m
         output.random = _response.value;[m
     }[m
[31m-    else if(command == 'getMooltipassStatus') {[m
[31m-        output.deviceStatus = {};[m
[31m-        output.deviceStatus.version = mooltipass.device.version;[m
[31m-        output.deviceStatus.connected = mooltipass.device.isUnlocked;[m
[31m-        if(mooltipass.device.status == 'no-card') {[m
[31m-            output.deviceStatus.state = 'NoCard';[m
[31m-        }[m
[31m-        else if(mooltipass.device.status == 'locked') {[m
[31m-            output.deviceStatus.state = 'Locked';[m
[31m-        }[m
[31m-        else if(mooltipass.device.status == 'unlocked') {[m
[31m-            output.deviceStatus.state = 'Unlocked';[m
[31m-        }[m
[31m-        else if(mooltipass.device.singleCommunicationMode) {[m
[31m-            output.deviceStatus.state = 'ManageMode';[m
[31m-        }[m
[31m-        else if(!mooltipass.device.isConnected) {[m
[31m-            output.deviceStatus.state = 'NotConnected';[m
[31m-        }[m
[31m-        else {[m
[31m-            output.deviceStatus.state = 'Error';[m
[31m-        }[m
[31m-    }[m
     else if(command == 'getCredentials') {[m
         if(_response.success) {[m
             output.credentials = {[m
[1mdiff --git a/extension/mooltipass-content.js b/extension/mooltipass-content.js[m
[1mindex 28e3bb6..acbea54 100644[m
[1m--- a/extension/mooltipass-content.js[m
[1m+++ b/extension/mooltipass-content.js[m
[36m@@ -1,6 +1,6 @@[m
 // contains already called method names[m
 var _called = {};[m
[31m-var content_debug_msg = false;[m
[32m+[m[32mvar content_debug_msg = true;[m
 [m
 var cipDebug = {};[m
 cipDebug.debugLog = function(message)[m
[36m@@ -12,6 +12,7 @@[m [mcipDebug.debugLog = function(message)[m
 }[m
 [m
 chrome.runtime.onMessage.addListener(function(req, sender, callback) {[m
[32m+[m[32m    cipDebug.debugLog(req);[m
 	if ('action' in req) {[m
 		cipDebug.debugLog(req.action);[m
 		if(req.action == "fill_user_pass_with_specific_login") {[m
[36m@@ -1321,7 +1322,7 @@[m [mcip.initCredentialFields = function(forceCall) {[m
 	_called.initCredentialFields = true;[m
 [m
 	var inputs = cipFields.getAllFields();[m
[31m-    cipDebug.debugLog('initCredentialFields():', inputs.length, 'input fields found');[m
[32m+[m[32m    cipDebug.debugLog('initCredentialFields(): ' + inputs.length + ' input fields found');[m
 [m
     cip.visibleInputsHash = cipFields.getHashForVisibleFields(inputs);[m
 [m
[1mdiff --git a/extension/vendor/mooltipass/device.js b/extension/vendor/mooltipass/device.js[m
[1mindex 6b3454c..e986b67 100644[m
[1m--- a/extension/vendor/mooltipass/device.js[m
[1m+++ b/extension/vendor/mooltipass/device.js[m
[36m@@ -315,6 +315,7 @@[m [mchrome.runtime.onMessageExternal.addListener(function(message, sender, sendRespo[m
             'version': message.deviceStatus.version,[m
             'state' : message.deviceStatus.state[m
         };[m
[32m+[m[32m        console.log(mooltipass.device._status)[m
     }[m
     // Returned on request for a random number[m
     else if (message.random !== null) {[m
